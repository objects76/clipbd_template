{
  "task": "translate content into Korean",
  "instructions": [
    "Keep the original document format (headings, lists, numbering, etc.).",
    "Do not translate code or quotations inside code blocks (``````); keep them as is.",
    "Translate all body text into Korean without leaving anything out."
  ],
  "final_check": "Carefully review the entire content to ensure that everything has been translated into Korean without omissions."
}

## Content:

[Pre-Recorded Audio](/docs/pre-recorded-audio)

Getting Started
===============

Copy page

An introduction to getting transcription data from pre-recorded audio files.

[Deepgram API PlaygroundTry this feature out in our API Playground.](https://playground.deepgram.com/?endpoint=listen)
This guide will walk you through how to transcribe pre-recorded audio with the Deepgram API. We provide two scenarios to try: transcribe a remote file and transcribe a local file.

#####

Before you start, you’ll need to follow the steps in the [Make Your First API Request](/docs/make-your-first-api-request) guide to obtain a Deepgram API key, and configure your environment if you are choosing to use a Deepgram SDK.

CURL
----

Next, try it with CURL. Add your own API key where it says `YOUR_DEEPGRAM_API_KEY` and then run the following examples in a terminal or your favorite API client.

If you run the “Local file CURL Example,” be sure to change `@youraudio.wav` to the path/filename of an audio file on your computer. (Read more about supported audio formats [here](/docs/supported-audio-formats)).

### Remote File CURL Example

```

| $ | curl \ |
| --- | --- |
| > | --request POST \ |
| > | --header 'Authorization: Token YOUR_DEEPGRAM_API_KEY' \ |
| > | --header 'Content-Type: application/json' \ |
| > | --data '{"url":"https://dpgr.am/spacewalk.wav"}' \ |
| > | --url 'https://api.deepgram.com/v1/listen?model=nova-3&smart_format=true' |

```

### Local File CURL Example

```

| $ | curl \ |
| --- | --- |
| > | --request POST \ |
| > | --header 'Authorization: Token YOUR_DEEPGRAM_API_KEY' \ |
| > | --header 'Content-Type: audio/wav' \ |
| > | --data-binary @youraudio.wav \ |
| > | --url 'https://api.deepgram.com/v1/listen?model=nova-3&smart_format=true' |

```

#####

The above example includes the parameter `model=nova-3`, which tells the API to use Deepgram’s most latest model. Removing this parameter will result in the API using the default model, which is currently `model=base`.

It also includes Deepgram’s [Smart Formatting](/docs/smart-format) feature, `smart_format=true`. This will format currency amounts, phone numbers, email addresses, and more for enhanced transcript readability.

SDKs
----

To transcribe pre-recorded audio using one of Deepgram’s SDKs, follow these steps.

### Install the SDK

Open your terminal, navigate to the location on your drive where you want to create your project, and install the Deepgram SDK.

JavaScript

Python

C#

Go

```

| $ | # Install the Deepgram JS SDK |
| --- | --- |
| > | # https://github.com/deepgram/deepgram-js-sdk |
| > |  |
| > | npm install @deepgram/sdk |

```

### Add Dependencies

JavaScript

Python

C#

Go

```

| $ | # Install dotenv to protect your api key |
| --- | --- |
| > |  |
| > | npm install dotenv |

```

### Transcribe a Remote File

This example shows how to analyze a **remote audio file** (a URL that hosts your audio file) using Deepgram’s SDKs. In your terminal, create a new file in your project’s location, and populate it with the code.

JavaScript

Python

C#

Go

```

| 1 | # main.py (python example) |
| --- | --- |
| 2 |  |
| 3 | import os |
| 4 | import logging |
| 5 | from deepgram.utils import verboselogs |
| 6 |  |
| 7 | from deepgram import ( |
| 8 | DeepgramClient, |
| 9 | PrerecordedOptions, |
| 10 | ) |
| 11 |  |
| 12 | AUDIO_URL = { |
| 13 | "url": "https://dpgr.am/bueller.wav" |
| 14 | } |
| 15 |  |
| 16 | def main(): |
| 17 | try: |
| 18 | # STEP 1 Create a Deepgram client using the DEEPGRAM_API_KEY from your environment variables |
| 19 | deepgram: DeepgramClient = DeepgramClient() |
| 20 |  |
| 21 | # STEP 2 Call the transcribe_url method on the rest class |
| 22 | options: PrerecordedOptions = PrerecordedOptions( |
| 23 | model="nova-3", |
| 24 | smart_format=True, |
| 25 | ) |
| 26 | response = deepgram.listen.rest.v("1").transcribe_url(AUDIO_URL, options) |
| 27 | print(f"response: {response}\n\n") |
| 28 |  |
| 29 | except Exception as e: |
| 30 | print(f"Exception: {e}") |
| 31 |  |
| 32 | if __name__ == "__main__": |
| 33 | main() |

```

### Transcribe a Local File

This example shows how to analyze a **local audio file** (an audio file on your computer) using Deepgram’s SDKs. In your terminal, create a new file in your project’s location, and populate it with the code. (Be sure to replace the audio filename with a path/filename of an audio file on your computer.)

JavaScript

Python

C#

Go

```

| 1 | # main.py (python example) |
| --- | --- |
| 2 |  |
| 3 | import os |
| 4 |  |
| 5 | from deepgram import ( |
| 6 | DeepgramClient, |
| 7 | PrerecordedOptions, |
| 8 | FileSource, |
| 9 | ) |
| 10 |  |
| 11 | # Path to the audio file |
| 12 | AUDIO_FILE = "spacewalk.mp3" |
| 13 |  |
| 14 | def main(): |
| 15 | try: |
| 16 | # STEP 1 Create a Deepgram client using the API key |
| 17 | deepgram = DeepgramClient() |
| 18 |  |
| 19 | with open(AUDIO_FILE, "rb") as file: |
| 20 | buffer_data = file.read() |
| 21 |  |
| 22 | payload: FileSource = { |
| 23 | "buffer": buffer_data, |
| 24 | } |
| 25 |  |
| 26 | #STEP 2: Configure Deepgram options for audio analysis |
| 27 | options = PrerecordedOptions( |
| 28 | model="nova-3", |
| 29 | smart_format=True, |
| 30 | ) |
| 31 |  |
| 32 | # STEP 3: Call the transcribe_file method with the text payload and options |
| 33 | response = deepgram.listen.rest.v("1").transcribe_file(payload, options) |
| 34 |  |
| 35 | # STEP 4: Print the response |
| 36 | print(response.to_json(indent=4)) |
| 37 |  |
| 38 | except Exception as e: |
| 39 | print(f"Exception: {e}") |
| 40 |  |
| 41 | if __name__ == "__main__": |
| 42 | main() |

```

Non-SDK Code Examples
---------------------

If you would like to try out making a Deepgram speech-to-text request in a specific language (but not using Deepgram’s SDKs), we offer a library of code-samples in this [Github repo](https://github.com/deepgram-devs/code-samples). However, we recommend first trying out our SDKs.

Results
-------

In order to see the results from Deepgram, you must run the application. Run your application from the terminal. Your transcripts will appear in your shell.

JavaScript

Python

C#

Go

```

| $ | # Run your application using the file you created in the previous step |
| --- | --- |
| > | # Example: python main.py |
| > |  |
| > | python YOUR_PROJECT_NAME.py |

```

#####

Deepgram does not store transcripts, so the Deepgram API response is the only opportunity to retrieve the transcript. Make sure to save output or [return transcriptions to a callback URL for custom processing](/docs/callback).

### Analyze the Response

When the file is finished processing (often after only a few seconds), you’ll receive a JSON response:

JSON
```

| 1 | { |
| --- | --- |
| 2 | "metadata": { |
| 3 | "transaction_key": "deprecated", |
| 4 | "request_id": "2479c8c8-8185-40ac-9ac6-f0874419f793", |
| 5 | "sha256": "154e291ecfa8be6ab8343560bcc109008fa7853eb5372533e8efdefc9b504c33", |
| 6 | "created": "2024-02-06T19:56:16.180Z", |
| 7 | "duration": 25.933313, |
| 8 | "channels": 1, |
| 9 | "models": [ |
| 10 | "30089e05-99d1-4376-b32e-c263170674af" |
| 11 | ], |
| 12 | "model_info": { |
| 13 | "30089e05-99d1-4376-b32e-c263170674af": { |
| 14 | "name": "2-general-nova", |
| 15 | "version": "2024-01-09.29447", |
| 16 | "arch": "nova-3" |
| 17 | } |
| 18 | } |
| 19 | }, |
| 20 | "results": { |
| 21 | "channels": [ |
| 22 | { |
| 23 | "alternatives": [ |
| 24 | { |
| 25 | "transcript": "Yeah. As as much as, it's worth celebrating, the first, spacewalk, with an all female team, I think many of us are looking forward to it just being normal. And, I think if it signifies anything, It is, to honor the the women who came before us who, were skilled and qualified, and didn't get the the same opportunities that we have today.", |
| 26 | "confidence": 0.99902344, |
| 27 | "words": [ |
| 28 | { |
| 29 | "word": "yeah", |
| 30 | "start": 0.08, |
| 31 | "end": 0.32, |
| 32 | "confidence": 0.9975586, |
| 33 | "punctuated_word": "Yeah." |
| 34 | }, |
| 35 | { |
| 36 | "word": "as", |
| 37 | "start": 0.32, |
| 38 | "end": 0.79999995, |
| 39 | "confidence": 0.9921875, |
| 40 | "punctuated_word": "As" |
| 41 | }, |
| 42 | { |
| 43 | "word": "as", |
| 44 | "start": 0.79999995, |
| 45 | "end": 1.04, |
| 46 | "confidence": 0.96777344, |
| 47 | "punctuated_word": "as" |
| 48 | }, |
| 49 | { |
| 50 | "word": "much", |
| 51 | "start": 1.04, |
| 52 | "end": 1.28, |
| 53 | "confidence": 1, |
| 54 | "punctuated_word": "much" |
| 55 | }, |
| 56 | { |
| 57 | "word": "as", |
| 58 | "start": 1.28, |
| 59 | "end": 1.5999999, |
| 60 | "confidence": 0.9926758, |
| 61 | "punctuated_word": "as," |
| 62 | }, |
| 63 | { |
| 64 | "word": "it's", |
|  |

```
In this default response, we see:

* `transcript`: the transcript for the audio segment being processed.
* `confidence`: a floating point value between 0 and 1 that indicates overall transcript reliability. Larger values indicate higher confidence.
* `words`: an object containing each `word` in the transcript, along with its `start` time and `end` time (in seconds) from the beginning of the audio stream, and a `confidence` value.

    Because we passed the `smart_format: true` option to the `transcription.prerecorded` method, each word object also includes its `punctuated_word` value, which contains the transformed word after punctuation and capitalization are applied.

#####

The `transaction_key` in the `metadata` field can be ignored. The result will always be `"transaction_key": "deprecated"`.

Limits
------

There are a few limits to be aware of when making a pre-recorded speech-to-text request.

### File Size

* The maximum file size is limited to 2 GB.
* For large video files, extract the audio stream and upload only the audio to Deepgram. This reduces the file size significantly.

### Rate Limits

**Nova, Base, and Enhanced Models:**

* Maximum of 100 concurrent requests per project.
* For information on Deepgram’s Concurrency Rate Limits, refer to our [API Rate Limits Documentation](/reference/api-rate-limits).

**Whisper Model:**

* Paid plan: 15 concurrent requests.
* Pay-as-you-go plan: 5 concurrent requests.

Exceeding these limits will result in a 429: Too Many Requests error.

### Maximum Processing Time

**Fast Transcription Models (Nova, Base, and Enhanced)**

* These models offer extremely fast transcription.
* Maximum processing time: 10 minutes.

**Slower Transcription Model (Whisper)**

* Whisper transcribes more slowly compared to other models.
* Maximum processing time: 20 minutes.

**Timeout Policy**

* If a request exceeds the maximum processing time, it will be canceled.
* In such cases, a 504: Gateway Timeout error will be returned.

What’s Next?
------------

Now that you’ve transcribed pre-recorded audio, enhance your knowledge by exploring the following areas.

### Read the Feature Guides

Deepgram’s features help you to customize your transcripts.

* [Language](/docs/language): Learn how to transcribe audio in other languages.
* [Profanity Filtering](/docs/language) and [Redaction](/docs/redaction): Discover how to remove profanity or redact personal information like credit card numbers.
* [Feature Overview](/docs/stt-pre-recorded-feature-overview): Review the list of features available for pre-recorded speech-to-text. Then, dive into individual guides for more details.

### Explore Use Cases

* Learn about the different ways you can use Deepgram products to help you meet your business objectives. [Explore Deepgram’s use cases](/use-cases).

### Transcribe Streaming Audio

* Now that you know how to transcribe pre-recorded audio, check out how you can use Deepgram to transcribe streaming audio in real time. To learn more, see [Getting Started with Streaming Audio](/docs/getting-started-with-live-streaming-audio).

---

Was this page helpful?Yes

No

[#### Feature Overview

Below is a matrix of Deepgram’s speech-to-text Pre-Recorded features. Please refer to the corresponding documentation for more details.

Next](/docs/stt-pre-recorded-feature-overview)

[Built with](https://buildwithfern.com/?utm_campaign=buildWith&utm_medium=docs&utm_source=developers.deepgram.com)
