0:05
시작하겠습니다. 모두 환영합니다, Cloud Code 모범 사례 세션입니다. 이 발표에서는 먼저 클라우드 코드가 무엇인지 높은 수준에서 이야기하고, 그 다음에 후드 아래를 조금 들여다보며
0:19
클라우드 코드가 어떻게 동작하는지 이해해 보겠습니다. 그리고 도구가 어떻게 작동하는지 아는 것이 유용하니까, 이를 바탕으로 클라우드 코드의 좋은 사용 사례와
0:29
이 도구를 최대한 활용하기 위해 우리가 내부적으로, 그리고 사용자들로부터 배운 모범 사례들을 이야기하겠습니다. 시작하기 전에, 간단히 제 소개와
0:41
제가 어떻게 이 무대에 서게 되었는지도 말씀드릴게요. 제 이름은 Cal이고, 저는 약 1년 반 전에 Anthropic에 합류해서 Applied AI라는 팀의 출범을 도왔습니다. Applied AI의 미션,
0:53
저희 팀의 미션은 고객과 파트너가 Claude 위에 뛰어난 제품과 기능을 구축하도록 돕는 것입니다. 실제로 이 말은 제가 하루 중 많은 시간을 Claude에게 프롬프트를 주면서
1:04
모델에서 최고의 출력을 끌어내는 데 쓴다는 뜻이죠. 그렇다고 해도 저는 코딩을 정말 좋아하고, 무언가 미친 아이디어로 프로젝트를 잔뜩 시작해놓고
1:15
끝까지 마무리하지 못하는 그런 타입의 개발자이기도 합니다. 그래서 시작만 하고 끝내지 못한 코드의 공동묘지가 있죠. 음, 그래도 저는 항상 새로운 걸 띄워봅니다. 작년 말,
1:24
슬랙에서 몇몇 사람들이 사용하고 있는 새로운 도구에 대해 이야기하는 걸 들었어요. 다들 정말 멋지다고 하더군요. 그래서 금요일 밤에, 나중에 Cloud Code가 될 그 도구를 다운로드했습니다.
1:33
그리고 제가 만들고 싶던 새로운 노트테이킹 앱에 그걸 던져봤죠. 그 주말 내내, 제 코딩 방식과 소프트웨어 엔지니어링에 대한 생각이 완전히 바뀌었습니다. 저는
1:44
주말 내내 노트북을 들고 다녔어요. Claude Code가 작동하는 걸 지켜보는 게 엄청 중독적이더라고요. 엔터를 누르고 브라우저로 넘어가 새로고침하면, 거대한
1:54
강력한 애플리케이션이 제 눈앞에서 조립되는 걸 보게 됩니다. 혼자라면 절대 도달하지 못했을 수준까지 훨씬 멀리 나아갔죠. 정말 충격적이었어요. 그러는 동안 조금
2:05
걱정도 됐습니다. 음, 이런 것들이 어떻게 작동하는지 대충 아니까, ‘와 토큰을 많이 쓰고 있네. 혼나거나 누가 눈치채지는 않겠지? 지금은 Anthropic 코드에 기여하고 있는 게 아닌데…’
2:13
같이 걱정했죠. 그런데 몰랐던 건, Claude Code 팀이 내부적으로 모든 Anthropic 직원들의 사용량을 추적하는 일종의 리더보드를 만들어놨다는 겁니다.
2:24
그 주말 동안 제가 1위로 치고 올라갔어요. 그 일을 계기로 Boris와 Cat, 그리고 초기 Cloud Code 팀을 만나게 됐고,
2:34
그들에게 “이 도구 정말 사랑합니다. 저도 프롬프트 작성에 대해 많이 알고 있어요. 제가 도와드려도 될까요?”라고 말할 수 있었습니다. 그렇게 관여하기 시작했고, 이제는 팀의 핵심 기여자 중 한 명으로서
2:46
시스템 프롬프트, 도구가 어떻게 작동하는지, 도구 설명과 도구 결과에 많이 관여하고 있고, 이 도구를 어떻게 평가할지도 함께 작업합니다. 그러니까 프롬프트를 바꿀 때
2:56
우리가 정말 개선한 건지, 그대로인 건지, 아니면 Cloud Code를 완전히 망치지 않았는지 어떻게 아느냐를 고민하는 겁니다. 자, 그럼 본론으로 들어가 보죠. 이것이
3:08
제가 가지고 있는 Claude Code에 대한 현재의 멘탈 모델이고, 사람들이 뭐냐고 물어볼 때 제가 설명하는 방식입니다. Claude Code는 모든 걸 터미널에서 하는
3:21
그런 동료와 같습니다. GUI(그래픽 인터페이스)는 절대 건드리지 않는 타입이죠. 달인입니다. 제가 주니어 엔지니어였을 때 멘토가 한 명 있었는데, 그의 책상으로 가서 “헤이 Tony, 이 버그 좀 도와줄래?”
3:31
라고 말하면 그는 번개처럼 터미널을 열고, 별의별 미친 bash 명령을 치고, Vim에서 여기저기 바꾸곤 했어요. 저는 항상 ‘와, 저건 미쳤다. 나도 저렇게 하는 법을 배워야지.’
3:41
라고 생각하며 자리로 돌아갔죠. 음, 결국 배우지는 못했습니다.
3:41
하지만 여러분 컴퓨터에 Claude Code가 있는 건, 항상 옆에 Tony가 있는 것과 비슷합니다. 자, Claude Code는 내부적으로 어떻게 동작할까요? Anthropic에서는 항상
3:58
우리가 ‘단순하지만 작동하는 것’을 하려고 합니다. Cloud Code에서 그게 의미하는 바는, 우리가 ‘아주 순수한 에이전트’라고 부르는 형태라는 겁니다. Anthropic에서 ‘에이전트’라고 말할 때는
4:11
일련의 지시사항, 강력한 도구들, 그리고 모델이 스스로 끝났다고 결정할 때까지 루프를 돌게 하는 것을 의미합니다. Cloud Code는 딱 그겁니다. 즉, 도구, 강력한 도구들, 그리고
4:24
터미널에 능숙한 사람이 사용할 법한 도구들—파일을 생성·편집하고 터미널을 사용하는 도구들이죠. 그리고 MCP로 다른 것들을 끌어올 수도 있습니다. 이제
4:35
그 위에, Claude가 코드베이스를 이해하는 방식이 있습니다. 1년 전쯤 코딩 에이전트/도구를 만든다고 하면, 아마 이런 아이디어를 떠올렸을 겁니다. 즉
4:47
사용자 메시지를 받아서 코드베이스의 어떤 파일들이 관련 있는지 알아내야 하니, 전체 코드베이스를 색인화하고 임베딩해서 멋진 RAG 검색을 돌리자—같은 생각이죠.
4:58
Cloud Code는 그렇게 동작하지 않습니다. 우리는 그런 인덱싱을 하지 않습니다. 대신, Claude는 여러분이 새로운 팀과 코드베이스에 합류했을 때
5:10
코드베이스를 탐색하며 이해하는 것과 같은 방식으로 탐색합니다. 즉, 에이전틱(Agentic) 검색—여러분이나 제가 쓸 법한 동일한 검색 도구들, 예컨대 glob, grep, find 같은 걸 사용해
5:21
코드베이스를 훑고 무슨 일이 일어나는지 이해합니다. 에이전틱 검색이란 말의 의미는, 모델이 검색을 해보고 결과를 본 다음 ‘흠, 좀 더 알아야겠네’라고 판단하면
5:32
몇 번이고 추가 검색을 하고 돌아올 수 있다는 뜻입니다. 그리고 이런 원시 기능들(프리미티브) 위에
5:43
몇 가지를 더 올립니다. 작업 과정을 텍스트로 볼 수 있는 아주 가벼운 UI 레이어가 있고, 에이전트가 작업할 수 있게 하되
5:54
위험한 일을 하려 할 때 인간이 개입하도록 강제하는 깔끔한 권한 시스템이 있습니다. 그리고 우리는 이 도구의 보안도 매우 신경 씁니다. 또 Claude Code가
6:06
모델 위에 아주 가벼운 레이어이고, 우리 모델이 Anthropic API뿐 아니라 AWS와 GCP 같은 클라우드 제공업체를 통해서도 제공되기 때문에,
6:19
그런 방식이 더 편하다면 Cloud Code를 다른 서비스에 아주 쉽게, 네이티브하게 연결할 수 있습니다. 자, 많은 분들이 저에게 묻습니다. “Cal, Cloud Code로 뭘 할 수 있나요?
6:33
어디에 쓰면 좋죠? 뭐가 흥미로운가요?” 현실은, 거의 뭐든 잘합니다. 우선 ‘발견(Discovery)’부터 봅시다. 커리어 동안 여러분은 새로운 코드베이스에
6:47
투입되는 일이 자주 있습니다. 팀을 바꾸거나, 회사를 바꾸거나, 오픈소스 프로젝트에 참여한다든가요. 처음 익숙해지는 동안에는
6:54
그리 생산적이지 않죠. 코드베이스에서 무엇이 어디에 있는지, 팀이 어떤 패턴을 쓰는지 등을 파악하느라 시간을 보냅니다. Claude Code는 이런 온보딩 과정을
7:03
슈퍼차지할 수 있습니다. “이 기능은 어디에 구현되어 있어?”라고 Claude에게 물을 수 있고, 터미널에도 능하니 “이 파일 좀 보고, git 히스토리를 훑어서
7:13
지난 몇 주 동안 이 코드가 어떻게 바뀌었는지 이야기해줘.”라고 말할 수도 있죠. 또 제가 과소평가되었다고 생각하는 사용법 하나는, 바로
7:25
바로 작업에 뛰어들기 전에 ‘생각 파트너’로 쓰는 겁니다. 저는 Claude와 함께 일하면서 기능을 구현하려거나 뭔가를 바꾸려 할 때, Claude를 열고
7:34
“헤이 Claude, 이 기능을 구현하려고 하는데, 일단 여기저기 검색해서 어떻게 하면 좋을지 알아보고, 두세 가지 옵션으로
7:43
보고해줘. 아직 작업 시작하지 마. 파일도 쓰지 마.”라고 말합니다. 그러면 Claude는 에이전틱 검색 능력을 사용해
7:52
몇 가지 아이디어를 가져옵니다. 그러면 저는 Claude와 함께 그 아이디어를 검증하고 프로젝트에 본격적으로 들어가죠. 물론 Cloud Code는 코드를 빌드하고 작성하는 데에도 훌륭합니다.
8:04
두 가지 관점에서 그렇습니다. 하나는 ‘제로 투 원(0→1)’입니다. 빈 디렉터리에 던져 놓고 “앱 만들어줘, 게임 만들어줘”라고 하면, 데모에서 정말 잘 작동하고
8:14
정말 재밌고, 매우 만족스럽습니다. 물론 현실에서 진짜 중요한 건, Cloud Code가 기존 코드베이스에서 얼마나 잘 작동하느냐죠. 그리고 우리는 주로 여기에 집중합니다. 음,
8:27
Cloud Code 팀의 우리 코드베이스에서는 비정상적으로 높은 수준의 단위 테스트 커버리지를 갖고 있습니다. 왜냐하면 Cloud Code를 사용하면 단위 테스트를 추가하는 게 매우 쉽고 간단하기 때문이죠. 그래서
8:41
코드 커버리지가 훌륭합니다. 또 우리 Cloud Code 자체 코드베이스에서는 커밋과 PR 메시지도 아주 좋습니다. 작업을 마치면 “헤이 Claude, 커밋 메시지 써줘, PR 메시지 써줘.”
8:50
라고 말하거든요. 배포와 그 외 라이프사이클에서도 Cloud Code를 훌륭히 사용할 기회가 많습니다. 몇 분이 이미 이야기했듯,
9:04
Cloud Code SDK를 사용하는 겁니다. 즉 헤드리스로, 프로그래밍 방식으로 사용해서 어디서든 코딩 에이전트를 뿌려 넣는 것이죠. 예를 들어
9:17
CI/CD에 넣거나, GitHub에서 사람들을 프로그래밍 방식으로 돕게 하는 방식입니다. 그리고 마지막으로, 지원 및 스케일에서도 뛰어납니다. 오류 디버깅을 더 빠르게 도와주죠.
9:30
고객들에게 Cloud Code를 제공하고 대화를 나누기 시작했을 때, 우리가 전혀 예상하지 못했던 한 가지가 있었습니다. 많은 고객, 혹은 잠재 고객이 “우리는
9:40
오래 미뤄온 대규모 코드베이스 마이그레이션이 있어요.”라고 말한 겁니다. 오래된 Java 버전에서 새 버전으로 가려는 팀, PHP에서 React나 Angular로
9:50
가려는 팀 같은 경우요. 우리는 이런 팀을 여러 번 만났고, Cloud Code 같은 도구가 있으면 그런 프로젝트가 훨씬 소화하기 쉬워진다고 했습니다. 팀에 가서 “자, 한 달 동안
10:00
리팩터링이나 코드베이스의 큰 부분을 다시 쓸 겁니다.”라고 말하는 일이 가능해지는 거죠. 그리고 이 모든 것 전반에 중요한 점이 하나 더 있습니다. 다시 말하지만, Claude는 터미널을 정말 잘한다는 겁니다.
10:12
이 말은 Git, Docker, BigQuery 같은 각종 CLI 도구들에 전부 강하다는 뜻입니다. 저는 더 이상 “아, 끔찍한 리베이스에 빠졌는데 어떻게 빠져나오더라?”
10:22
라고 고민하지 않습니다. 그냥 Cloud Code를 켜고 상황을 설명한 뒤, “이거 좀 고쳐줄래?”라고 하면 됩니다. 정말 놀랍습니다. 이제
10:34
모범 사례로 넘어가 보죠. 첫 번째는 놀랍지 않게도, claw.md(claude.md) 파일을 쓰라는 겁니다. 앞서 말했듯 Cloud Code는 에이전트이고, 몇 가지 도구,
10:48
프롬프트에 가벼운 지시사항이 있지만 ‘진짜 메모리’는 없습니다. 그래서 동일한 코드베이스에서 세션 간 또는 팀원 간 상태를 공유하는 주요 방법이
11:00
바로 이 claude.md 파일입니다. Claude를 시작할 때, 작업 디렉터리에 claude.md 파일이 있다면 그것이 그대로 컨텍스트에 들어갑니다.
11:12
프롬프트에 그대로 삽입되죠. 기본적으로는 “헤이 Claude, 개발자가 남긴 중요한 지시사항이야. 꼭 주의 깊게 따라.”라는 의미입니다. 이 파일을 두는 위치는
11:22
여러 가지가 있습니다. 프로젝트에 넣고 버전 관리해 팀원들이 공유하게 할 수도 있고, 집(home) 디렉터리에 넣어
11:31
무엇을 작업하든 Claude가 항상 알았으면 하는 것들을 적어둘 수도 있습니다. 여기에 넣을 내용은 예컨대 “유닛 테스트는 이렇게 실행해.” 같은 것들, 혹은
11:41
검색과 작업을 쉽게 하기 위해 “이 프로젝트가 어떻게 구성되어 있는지, 테스트가 어디에 있고, 모듈은 어떻게 나뉘는지” 같은 개요를 적을 수도 있습니다.
11:51
또는 스타일 가이드 같은 것도 좋죠. 이런 것들을 시간에 따라 구축해 나갈 수 있습니다. 또 중요한 것이 권한 관리입니다.
12:03
Cloud Code를 실행하면 온갖 권한 관련 메시지들이 오갑니다. 기본적으로는, Claude가 읽거나 검색하는 read 작업은
12:13
그냥 흘려보냅니다. 하지만 파일을 쓰거나 bash 명령을 실행하는 등, 여러분의 머신을 바꿀 수 있는 일을 시작하면,
12:26
그때는 UI가 개입해서 “예, 항상 허용 / 아니오, 다른 걸 하겠다” 같은 선택지를 제시합니다. 이 권한 관리를 똑똑하게 쓰면
12:38
더 빠르게 일할 수 있습니다. 예를 들어 autoaccept 모드가 있는데, Cloud Code에서 Shift+Enter(발표에서는 Shift+Tab이라 언급) 를 누르면 Claude가 바로 작업을 시작합니다. 또 설정에서
12:48
특정 bash 명령을 자동 승인하게 할 수 있습니다. 예컨대 “npm run test를 실행해도 될까요?”라는 질문에 매번 ‘예’를 누르는 게 지겨우면 항상 승인하도록요. 이런
13:01
권한 관리를 만져보는 건 워크플로 속도를 높이는 좋은 방법입니다. 통합 설정(Integration setup). Cloud Code를 최대한 활용하려면, 다시 강조하지만 Claude는 터미널에 강합니다.
13:12
CLI로 접근할 수 있는 애플리케이션이 있다면—GitHub가 좋은 예죠—강력한 GH라는 도구가 있습니다. 이런 CLI 도구를 설치하면 Cloud Code에 더 많은 일을
13:23
맡길 수 있습니다. 또는 MCP 서버를 더 붙여도 되고요. 경험상,
13:37
문서화가 잘 된 유명한 CLI 도구와 MCP 서버 중에서 선택해야 한다면,
13:48
저는 CLI 도구 사용을 권합니다. 또 내부에 자체 도구가 있다면—Anthropic에는 우리에게 여러 일을 해주는 ‘coup’라는 것이 있어요—그걸 Claude에게 알려줄 수도 있습니다. 그런 내용은
14:01
claude.md에 적어두면 좋겠죠. 그 다음은 컨텍스트 관리입니다. Claude는 에이전트이고, 에이전트는
14:13
도구를 호출하고 호출하면서 컨텍스트가 점점 쌓입니다. 최소한 Anthropic의 모델은 200,000 토큰의 컨텍스트 윈도우를 가지고 있고, 이걸 꽉 채울 수 있어요. 그래서 긴 세션에서
14:24
오래 작업하다 보면, 오른쪽 아래에 “컨텍스트 윈도우가 차고 있다”는 경고가 뜹니다. 상황에 따라 두 가지 선택지가 있죠. /clear를 실행해
14:33
처음부터 다시 시작하거나, /compact를 실행하는 겁니다. /compact를 실행하면, 사용자 메시지가 삽입되며 “지금까지 우리가 한 일을
14:43
요약해서 다른 개발자에게 넘길 거야. 그가 이어서 작업할 거야.” 같은 내용이 들어갑니다. 그리고 그 요약이
14:55
다음 세션의 씨앗이 됩니다. 우리는 이 compact 기능을 많이 다듬었기 때문에, 컨텍스트 창을 꽉 채운 뒤 compact를 실행하고
15:04
다시 시작해도 계속 이어갈 수 있습니다. 효율적인 워크플로. Cloud Code로 무엇을 할 수 있고,
15:16
어떻게 최대한 활용할까요? 계획과 할 일(To-dos) 활용입니다. 앞서 잠깐 말했지만, Cloud Code를 켜자마자 “이 버그 고쳐줘”라고 말하기보다는
15:26
“이런 버그가 있는데, 어디서부터 비롯됐는지 검색해서 찾아내고, 어떻게 고칠지 계획을 알려줘.”라고 말하는 게 좋습니다. 그러면
15:36
여러분이 Claude의 계획을 검증하고 나서 시작할 수 있어 많은 시간을 절약할 수 있습니다. 또한 우리는 To-do 리스트 기능이 있습니다.
15:46
Claude가 큰 작업을 할 때는 종종 To-do 리스트를 만듭니다. 여러분이 그 리스트를 잘 보고 있다가,
15:57
이상한 항목이나 말이 안 되는 항목이 보이면, 그때 Esc를 눌러 “헤이 Claude, To-do 리스트를 바꾸자. 지금 경로가 좀 잘못된 것 같아.”라고 개입하면 됩니다.
16:06
‘스마트 바이브 코딩’. Claude에게 일을 맡기고 엔터를 눌러, 마지막에 무슨 일이 벌어지는지 보는 건 유혹적이고 강력합니다. 하지만 더 좋게 만드는 몇 가지가 있습니다. 30분짜리
16:16
세션에서 이 주제만 다룰 발표가 따로 있다고도 하던데요. 테스트 주도 개발을 하고, Claude로 하여금 작은 변경을 하게 하고, 테스트를 실행하고, 통과하는지 확인하고, 항상 TypeScript 체크와 린트,
16:28
그리고 정기적으로 커밋하게 하세요. 그러면 만약 경로가 틀어져도 언제든 롤백해 다시 시도할 수 있습니다. 스크린샷으로 안내하고 디버그하기. Claude는
16:39
멀티모달 모델 위에 구축되었습니다. 언제든 스크린샷을 찍어 붙여 넣을 수 있고, 이미지 파일이 있다면 “헤이 Claude, 이 mock.png를 보고
16:49
웹사이트를 만들어줘.” 같은 요청도 할 수 있죠. 고급 기법. Claude를 꽤 써봤다면,
17:02
다음 단계로 밀어붙이는 몇 가지를 생각해볼 수 있습니다. 내부와 고객 모두에게서 우리가 본 것 중 하나는, 어느 정도 익숙해지면 한꺼번에 여러 Claude를
17:12
쓰고 싶다는 유혹이 생긴다는 겁니다. Anthropic 안에서도, 고객 중에서도 Claude를 4개 동시에 돌리는 사람들이 있어요. 방법은 여러 가지입니다. Tmux에
17:24
띄울 수도 있고, 탭을 나눌 수도 있고요. 별별 방식이 있습니다. 여러분도 여러 Claude를 동시에 돌려보며 오케스트레이션해 보길 권합니다. 꽤 재미있습니다. 저는 두 개까지만 하는데,
17:35
네 개를 하는 사람들도 알아요. Esc를 쓰세요. Esc는 최고의 친구입니다. Claude가 작업하는 동안, 무슨 일을 하고 있는지 눈여겨보세요. 그리고 Esc를 눌러 중단하고
17:47
“지금 경로가 좀 잘못됐어”라거나 “다른 걸 해 줬으면 해”라고 개입할 수 있습니다. 언제 Esc를 눌러야 하고, 언제 Claude가 스스로 알아서 하게 둬야 하는지 아는 것이
17:56
이 도구를 최대한 활용하는 핵심입니다. 숨겨진 기능도 있어요. 많은 분이 모르는데, Esc를 두 번 누르면 대화에서 뒤로 점프할 수 있습니다. 즉,
18:06
대화로 돌아가 MCP에서의 도구 확장을 재설정할 수 있습니다. MCP에서의 도구 확장 재설정에 관해 말이죠. 그 다음은
18:19
MCP 확장입니다. bash와 Cloud가 가진 도구만으로는 여전히 안 되는 게 있다고 느낀다면,
18:19
그때 MCP 서버를 보기 시작해야 합니다. 그리고 헤드리스 자동화. 우리가 가장 흥분하는 부분이지만, 내부적으로도 아직 머리를 싸매고 있는 부분입니다.
18:30
Claude를 프로그래밍 방식으로 어떻게 사용할까? GitHub Actions에는 이미 넣었고, 다른 창의적인 곳에도
18:30
넣는 방법을 찾고 싶습니다. 여러분도 같은 도전을 해 보시길 바랍니다.
18:43
그럼 이제 제 컴퓨터로 넘어가 보겠습니다. 또 하나의 모범 사례가 있는데, 항상 최신 소식을 따라가는 게 좋다는 겁니다. 우리는
18:55
엄청 빠르게 배포하고 있어요. 오늘 기준으로 새로 나온 것들 몇 가지를 훑어보겠습니다. 음, Cloud Now에서 실행하면 /model을 입력할 수 있고, 지금
19:06
어떤 모델을 쓰고 있는지 볼 수 있습니다. 저는 기본값인 Sonnet을 쓰고 있어요. Opus로도 옮길 수 있습니다. /config에서도 같은 일을 할 수 있고요. 여기서 바꿀 수 있습니다. 이게 새로 추가됐습니다.
19:20
여러분에게 맞는 모델을 사용하고 있는지 확인하세요. 모델과 관련해 또 새로운 점은, 이런 식으로 말할 수 있다는 겁니다. 음, “이 프로젝트에 뭐가 있는지 알아낼 수 있어?”
19:32
우리는 한동안 ‘think hard’ 또는 확장 사고(extended thinking)를 지원해 왔습니다. 이건 훌륭했지만, 이전 모델에서는
19:44
도구 호출 사이에는 모델이 생각하지 못하게 했습니다. 그런데 사실 그때가 사고가 가장 중요한 순간이죠. Claude 4부터는 도구 호출 사이에도
19:44
모델이 생각할 수 있게 되었습니다. 그리고 그걸 눈으로 볼 수 있습니다. 지금 이 프로젝트 안에 Claude가 있고,
19:53
여기에 몇 개의 파일이 있습니다. 그냥 “think hard 해서 이 프로젝트에 뭐가 있는지 알아내줘”라고 시켜 보죠. 그리고 Claude가 어떻게 작업하는지 볼 수 있습니다. ‘생각 중’이
20:03
트리거되면 연한 회색 텍스트가 보일 거고, 파일을 읽는 등의 도구 호출이 이어지고, 그다음에 또 생각하는 과정이 보일 겁니다.
20:14
아주 멋져요. 버그를 고치거나 작업할 때, ‘think hard’를 같이 던져 보시길 권합니다. 그리고 한 가지 더—저는 지금 VS Code에서 보여드리지만,
20:27
JetBrains에서도 마찬가지로 훌륭한 통합이 있습니다. 예컨대 Claude가 제가 열어둔 파일이 뭔지 알 수 있어요. “내가 어떤 파일을 열어놨어?”
20:41
제가 원래 하려던 말은 그게 아니었지만, Claude가 알아낼 겁니다. 이런 것들을 할 수 있죠.
20:58
이런 것들을 항상 따라가시길 권합니다. Enthropic의 공개 GitHub 프로젝트—Anthropic의 Claude Code—가 있고,
21:08
거기에 이슈를 올릴 수도 있지만, 변경 로그도 올려둡니다. 저는 주 1회는 꼭 확인해서 우리가 배포하는 새 기능들을 따라가려고 합니다. 저도 다 따라가기 벅차거든요. 자, 그럼
21:19
이제 4분 정도 남았네요. Cloud Code에 관해 무엇이든 질문해 주세요. 여기 준비되어 있습니다. 원하시면 라이브 데모도 할 수 있어요. 음, 몇 가지 질문을 받아보죠.
21:33
감사합니다. 아주 기본적인 질문일 수도 있는데요. 프로젝트 안에 여러 개의 Claude MD 파일을 둘 수 있나요? 가능하다면 Claude가 알아서 판단하나요, 아니면 안 되나요? 음, 몇 가지 옵션이 있어요. 같은
21:46
디렉터리 안에서는 안 됩니다. 음, 하지만 여기 하나, 그리고 하위 디렉터리에 하나를 둘 수는 있죠. 그리고 우리는 이걸 바꿨습니다. 모든 하위 디렉터리의 파일들을 다 읽지 않도록요. Anthropic에서는
22:02
모노레포를 쓰다 보니, 최상단에서 열면 수많은 claude.md가 컨텍스트를 터뜨려 버리거든요. 그래서 Claude가 여기저기 검색하다가 하위 디렉터리의 claude.md 파일을
22:15
발견하고 관련 있다고 판단되면 읽도록 권장합니다. 하지만 기본적으로는, 툴을 시작할 때 현재 작업 디렉터리에 있는
22:25
claude.md만 읽습니다. 그리고 홈 디렉터리에 하나 둘 수도 있어요. 음, 또 할 수 있는 일들이 있는데, 새로 추가된 기능으로 claude.md 안에서 다른 파일을 참조할 수 있게 했습니다.
22:39
예컨대 이런 식으로 @ 기호를 써서요. 항상 읽어오고 싶은 다른 claude.md 파일이 있다면,
22:39
그런 식으로 참조할 수 있습니다. 안녕하세요. 저는 Claude가 제 Claude MD를 잘 지키지 못하는 문제가 있었어요. 특히 한 가지가—
22:54
네. 제가 리팩터링을 요청하면, ‘무엇을 했는지’(what)를 설명하는 인라인 주석을 남겨요. 너무나 자명한 걸요. 그래서 “그런 인라인 주석은 모두 제거해 달라”고 지시하면 그걸 지우지만,
23:04
같은 패스에서 곧바로 다시 그걸 합니다. 이런 경우에 대처 전략이 있을까요? 음, 그걸 해결한 방법이 두 가지가 있었습니다. 사실 그건 프롬프트 문제가 아니라 ‘모델 문제’였어요. 프롬프트에는
23:22
“인라인 주석 남기지 마”라는 내용이 꽤 많았습니다. 그럼에도 모델이 주석을 너무 좋아했죠. 그래서 Claude MD가 큰 도움이 되지 않았다는 게 놀랍지는 않네요. 기본 설정 차원에서도
23:32
그걸 억누르려고 많이 노력했습니다. Claude 4에서 대부분 고쳤습니다. 물론 새로운 이상한 행동의 기벽들이 있을 수도 있지만,
23:45
Claude 4에서는 지시를 따르는 성향이 전반적으로 더 좋아졌습니다. 초기 테스터들로부터 “이제 Claude MD의 지시를 훨씬 잘 따른다”는 피드백을 많이 받았어요.
23:54
그래서 지금이 Claude MD를 다시 들여다보고, 정말 필요한 것과 불필요한 것을 정리할 좋은 타이밍일 수 있습니다. 아마
24:05
몇 가지는 빼도 될 수도 있고, 몇 가지는 새로 추가해야 할 수도 있어요. 그러니 새 모델로 옮기면서 내용을 다시 한번 점검해 보세요. 음,
24:15
혹시 생각 못 하셨을까 봐 여쭙는데요. 멀티 에이전트 실행과 병렬화에 대해서요. 예를 들어 에이전트가 4개일 때, 에이전트 2와 3은 에이전트 1의 컨텍스트를 사용하고,
24:24
에이전트 4는 어느 시점에 에이전트 2의 컨텍스트를 쓰게 하는… 네, 음 네, 흥미롭네요. 저희가 하려는 건 앞부분에서 말했듯 ‘단순하지만 작동하는 것’입니다. 즉,
24:37
모든 걸 잘하는 하나의 에이전트죠. 아마 언젠가 그걸 잘 풀어낼 겁니다. 지금 그걸 하려면 아마 모든 에이전트가
24:45
공유 마크다운 파일 같은 곳에 글을 써서 서로
24:55
체크인하고 커뮤니케이션하게 만드는 게 좋을 겁니다. 가끔 저는 Claude/claude.md와 작업할 때 “다른 개발자를 위해 ticket.md에 메모 좀 남겨줘.”라고 하고,
25:06
그다음 다른 Claude Code를 켜서 “ticket.md 읽어봐. 다른 개발자가 남긴 메모야. 그걸 바탕으로 작업해.”라고 하곤 합니다. 그러니 지금으로서는
25:15
그 상태를 파일에 쓰고, 모델이 파일을 읽고 문맥을 파악하는 능력을 믿는 게
25:26
최선일 겁니다. 언젠가 그걸 제품에서 더 네이티브하게 노출하는 영리한 방법을
25:26
찾을 수도 있겠죠. 멋집니다. 자, 이제
25:42
가방에서 우연히 찾은 희귀한 Claude Code 스티커가 좀 있어요. 저를 찾아오세요. 저쪽에 있을 겁니다. 음, 나눠드릴게요. 감사합니다. [박수]
