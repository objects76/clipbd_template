1
00:00:05,000 --> 00:00:19,000
Let's get started. Welcome everyone to Cloud Code best practices. In this talk, I'm going to talk about kind of what cloud code is at a high level. Then we'll peer under the hood a little bit
시작하겠습니다. 모두 환영합니다, Cloud Code 모범 사례 세션입니다. 이 발표에서는 먼저 클라우드 코드가 무엇인지 높은 수준에서 이야기하고, 그 다음에 후드 아래를 조금 들여다보며

2
00:00:19,000 --> 00:00:29,000
to kind of understand how cloud code works. And then knowing that because it's useful to kind of know how your tools work. We're going to talk about good use cases for cloud code and also
클라우드 코드가 어떻게 동작하는지 이해해 보겠습니다. 그리고 도구가 어떻게 작동하는지 아는 것이 유용하니까, 이를 바탕으로 클라우드 코드의 좋은 사용 사례와

3
00:00:29,000 --> 00:00:41,000
best practices we've figured out both internally and from our users uh for getting the most out of this tool. Uh but before I get started, I'd like to introduce myself real quick and talk about how
이 도구를 최대한 활용하기 위해 우리가 내부적으로, 그리고 사용자들로부터 배운 모범 사례들을 이야기하겠습니다. 시작하기 전에, 간단히 제 소개와

4
00:00:41,000 --> 00:00:53,000
I ended up on the stage. So, my name's Cal and I joined Enthropic about a year and a half ago uh to help start up a team we call applied AI. And it's the applied AI's kind of mission,
제가 어떻게 이 무대에 서게 되었는지도 말씀드릴게요. 제 이름은 Cal이고, 저는 약 1년 반 전에 Anthropic에 합류해서 Applied AI라는 팀의 출범을 도왔습니다. Applied AI의 미션,

5
00:00:53,000 --> 00:01:04,000
our team's mission is to help our customers and partners build great products and features on top of Claude. So what that really means is I spend a lot of my day prompting Claude to
저희 팀의 미션은 고객과 파트너가 Claude 위에 뛰어난 제품과 기능을 구축하도록 돕는 것입니다. 실제로 이 말은 제가 하루 중 많은 시간을 Claude에게 프롬프트를 주면서

6
00:01:04,000 --> 00:01:15,000
get the absolute best outputs out of these models. That said, I also love to code and I'm definitely one of those coders that like starts a lot of projects, has some crazy idea,
모델에서 최고의 출력을 끌어내는 데 쓴다는 뜻이죠. 그렇다고 해도 저는 코딩을 정말 좋아하고, 무언가 미친 아이디어로 프로젝트를 잔뜩 시작해놓고

7
00:01:15,000 --> 00:01:24,000
and then just never finishes them. So, I have this graveyard of just like code that I started, never really finished. Um, but I'm always spinning new things up. And late last year,
끝까지 마무리하지 못하는 그런 타입의 개발자이기도 합니다. 그래서 시작만 하고 끝내지 못한 코드의 공동묘지가 있죠. 음, 그래도 저는 항상 새로운 걸 띄워봅니다. 작년 말,

8
00:01:24,000 --> 00:01:33,000
I was in Slack and I was hearing about this new tool that a few people are using. They were saying it was really cool. And so, on a Friday night, I downloaded the tool that would become Cloud Code.
슬랙에서 몇몇 사람들이 사용하고 있는 새로운 도구에 대해 이야기하는 걸 들었어요. 다들 정말 멋지다고 하더군요. 그래서 금요일 밤에, 나중에 Cloud Code가 될 그 도구를 다운로드했습니다.

9
00:01:33,000 --> 00:01:44,000
And I threw it at this kind of new notetaking app that I wanted to build. And like that whole weekend just kind of totally changed the way that I code and think about software engineering. I was
그리고 제가 만들고 싶던 새로운 노트테이킹 앱에 그걸 던져봤죠. 그 주말 내내, 제 코딩 방식과 소프트웨어 엔지니어링에 대한 생각이 완전히 바뀌었습니다. 저는

10
00:01:44,000 --> 00:01:54,000
carrying around my laptop with me all weekend. I was super addicted to just watching Claude Code work and I would press enter and I'd switch over to my browser and refresh and I watched this huge
주말 내내 노트북을 들고 다녔어요. Claude Code가 작동하는 걸 지켜보는 게 엄청 중독적이더라고요. 엔터를 누르고 브라우저로 넘어가 새로고침하면, 거대한

11
00:01:54,000 --> 00:02:05,000
powerful application come together in front of my eyes. And I got way farther into this thing than I ever would have on my own. And it just blew my mind. And while I was doing this, I was a little
강력한 애플리케이션이 제 눈앞에서 조립되는 걸 보게 됩니다. 혼자라면 절대 도달하지 못했을 수준까지 훨씬 멀리 나아갔죠. 정말 충격적이었어요. 그러는 동안 조금

12
00:02:05,000 --> 00:02:13,000
worried. I was like, you know, I you know, I kind of know how these things work. So I'm like, man, I'm using a lot of tokens. I hope I don't get in trouble or anyone like notices. I'm not really
걱정도 됐습니다. 음, 이런 것들이 어떻게 작동하는지 대충 아니까, ‘와 토큰을 많이 쓰고 있네. 혼나거나 누가 눈치채지는 않겠지? 지금은 Anthropic 코드에 기여하고 있는 게 아닌데…’

13
00:02:13,000 --> 00:02:24,000
contributing to anthropic code. Um, but what I didn't know is that the claude code team had built this internal like leaderboard tracking how much all the anthropic employees were using
같이 걱정했죠. 그런데 몰랐던 건, Claude Code 팀이 내부적으로 모든 Anthropic 직원들의 사용량을 추적하는 일종의 리더보드를 만들어놨다는 겁니다.

14
00:02:24,000 --> 00:02:34,000
this. And over the weekend, I had shot to the top. And so through that, I got to meet Boris and Cat and some of the early cloud code team. And I was able to start talking to them and say,
그 주말 동안 제가 1위로 치고 올라갔어요. 그 일을 계기로 Boris와 Cat, 그리고 초기 Cloud Code 팀을 만나게 됐고,

15
00:02:34,000 --> 00:02:46,000
"Hey, I love this tool. I also know a lot about prompting. Can I help you all out?" And so through that I got involved and now I'm one of the core contributors on the team and I do a lot of I work
그들에게 “이 도구 정말 사랑합니다. 저도 프롬프트 작성에 대해 많이 알고 있어요. 제가 도와드려도 될까요?”라고 말할 수 있었습니다. 그렇게 관여하기 시작했고, 이제는 팀의 핵심 기여자 중 한 명으로서

16
00:02:46,000 --> 00:02:56,000
a lot on the prompting the system prompts how the tools work the tool descriptions and tool results as well as I work on how we evaluate this tool. So when we think about changing the prompts how
시스템 프롬프트, 도구가 어떻게 작동하는지, 도구 설명과 도구 결과에 많이 관여하고 있고, 이 도구를 어떻게 평가할지도 함께 작업합니다. 그러니까 프롬프트를 바꿀 때

17
00:02:56,000 --> 00:03:08,000
do we make how do we know we made things better or the same and we didn't totally ruin cloud code. So with that said let's kind of dive in. So, here's my current mental model of Claude Code and how I
우리가 정말 개선한 건지, 그대로인 건지, 아니면 Cloud Code를 완전히 망치지 않았는지 어떻게 아느냐를 고민하는 겁니다. 자, 그럼 본론으로 들어가 보죠. 이것이

18
00:03:08,000 --> 00:03:21,000
describe it to people when people ask me. Claude Code is like that co-worker that does everything on the terminal. It's the sort of person that just never touches the guey. They're a whiz. I think
제가 가지고 있는 Claude Code에 대한 현재의 멘탈 모델이고, 사람들이 뭐냐고 물어볼 때 제가 설명하는 방식입니다. Claude Code는 모든 걸 터미널에서 하는

19
00:03:21,000 --> 00:03:31,000
of when I was a junior engineer, I had this mentor and I would walk over to his desk and I would say, "Hey, Tony, can you help me with this bug?" and he would whipping it open his terminal and he'd
그런 동료와 같습니다. GUI(그래픽 인터페이스)는 절대 건드리지 않는 타입이죠. 달인입니다. 제가 주니어 엔지니어였을 때 멘토가 한 명 있었는데, 그의 책상으로 가서 “헤이 Tony, 이 버그 좀 도와줄래?”

20
00:03:31,000 --> 00:03:41,000
be like doing all these crazy bash commands and changing things around in Vim and I'd always walk away thinking, "Wow, that was crazy. I should learn how to do that." Um, I never did.
라고 말하면 그는 번개처럼 터미널을 열고, 별의별 미친 bash 명령을 치고, Vim에서 여기저기 바꾸곤 했어요. 저는 항상 ‘와, 저건 미쳤다. 나도 저렇게 하는 법을 배워야지.’

21
00:03:41,000 --> 00:03:58,000
But having Claude Code on your computer is kind of like having Tony next to you all the time. So, how does Claude code kind of work under the hood? At Anthropic, we try to always do what
하지만 여러분 컴퓨터에 Claude Code가 있는 건, 항상 옆에 Tony가 있는 것과 비슷합니다. 자, Claude Code는 내부적으로 어떻게 동작할까요? Anthropic에서는 항상

22
00:03:58,000 --> 00:04:11,000
we call the simple thing that works. And what that means for Cloud Code is it's what we would consider a very pure agent. And anthropic, when we talk about agents, what we really mean is some
우리가 ‘단순하지만 작동하는 것’을 하려고 합니다. Cloud Code에서 그게 의미하는 바는, 우리가 ‘아주 순수한 에이전트’라고 부르는 형태라는 겁니다. Anthropic에서 ‘에이전트’라고 말할 때는

23
00:04:11,000 --> 00:04:24,000
instructions, some powerful tools, and you let the model just run in a loop until it decides it's done. And that's really what Cloud Code is. So it's tools, powerful tools, and the tools that you
일련의 지시사항, 강력한 도구들, 그리고 모델이 스스로 끝났다고 결정할 때까지 루프를 돌게 하는 것을 의미합니다. Cloud Code는 딱 그겁니다. 즉, 도구, 강력한 도구들, 그리고

24
00:04:24,000 --> 00:04:35,000
know someone that was really good at a terminal would be able to use tools to create and edit files to use the terminal. And then you can also do things like pull in other things with MCP. Now,
터미널에 능숙한 사람이 사용할 법한 도구들—파일을 생성·편집하고 터미널을 사용하는 도구들이죠. 그리고 MCP로 다른 것들을 끌어올 수도 있습니다. 이제

25
00:04:35,000 --> 00:04:47,000
on top of that, there's how Claude understands the codebase. And if you're going to build a coding agent or a coding tool a year ago, you'd probably have ideas like, well, okay, I'm going to
그 위에, Claude가 코드베이스를 이해하는 방식이 있습니다. 1년 전쯤 코딩 에이전트/도구를 만든다고 하면, 아마 이런 아이디어를 떠올렸을 겁니다. 즉

26
00:04:47,000 --> 00:04:58,000
get this user message about something about this codebase and I'll need to figure out which files are relevant. So maybe I'll like index the whole codebase and embed it and do this fancy like kind
사용자 메시지를 받아서 코드베이스의 어떤 파일들이 관련 있는지 알아내야 하니, 전체 코드베이스를 색인화하고 임베딩해서 멋진 RAG 검색을 돌리자—같은 생각이죠.

27
00:04:58,000 --> 00:05:10,000
of rag retrieval thing. That is not how cloud code works. We don't do any sort of indexing. Instead, claude kind of explores and understands the codebase. how you if you were new to a team
Cloud Code는 그렇게 동작하지 않습니다. 우리는 그런 인덱싱을 하지 않습니다. 대신, Claude는 여러분이 새로운 팀과 코드베이스에 합류했을 때

28
00:05:10,000 --> 00:05:21,000
and new to a codebase would explore a codebase and that is through a gentic search is the same sort of search tools you or I would use things like glob and gp and find and it can work its way
코드베이스를 탐색하며 이해하는 것과 같은 방식으로 탐색합니다. 즉, 에이전틱(Agentic) 검색—여러분이나 제가 쓸 법한 동일한 검색 도구들, 예컨대 glob, grep, find 같은 걸 사용해

29
00:05:21,000 --> 00:05:32,000
through a codebase and understand what's going on and when we talk about a gentic search that really means the model can go do some searches and then it can look at the results and can say hm maybe I
코드베이스를 훑고 무슨 일이 일어나는지 이해합니다. 에이전틱 검색이란 말의 의미는, 모델이 검색을 해보고 결과를 본 다음 ‘흠, 좀 더 알아야겠네’라고 판단하면

30
00:05:32,000 --> 00:05:43,000
need to figure out a few more things I'm going to go do some more searching and then come back and then on top of these primitives. On top of this agent, we have a few things. We have a very nice
몇 번이고 추가 검색을 하고 돌아올 수 있다는 뜻입니다. 그리고 이런 원시 기능들(프리미티브) 위에

31
00:05:43,000 --> 00:05:54,000
light UI layer where you get to watch Claude code work. You see all the text fly by and we have this nice permission system that allows the agent to work and allows and kind of forces the
몇 가지를 더 올립니다. 작업 과정을 텍스트로 볼 수 있는 아주 가벼운 UI 레이어가 있고, 에이전트가 작업할 수 있게 하되

32
00:05:54,000 --> 00:06:06,000
human to butt in when the agent is doing something dangerous. And then on top of that, we also care a lot about security in this tool. And so because quad code is just such a lightweight kind of
위험한 일을 하려 할 때 인간이 개입하도록 강제하는 깔끔한 권한 시스템이 있습니다. 그리고 우리는 이 도구의 보안도 매우 신경 씁니다. 또 Claude Code가

33
00:06:06,000 --> 00:06:19,000
layer on top of the model and the fact that our model is available not just behind anthropic APIs but also with our cloud providers AWS and GCP it's very easy and native to point cloud code at one of
모델 위에 아주 가벼운 레이어이고, 우리 모델이 Anthropic API뿐 아니라 AWS와 GCP 같은 클라우드 제공업체를 통해서도 제공되기 때문에,

34
00:06:19,000 --> 00:06:33,000
these other services if you feel more comfortable consuming cloud that way. Now a lot of people ask me hey Cal what can I use cloud code for? Like what is it good at? where is it interesting? And
그런 방식이 더 편하다면 Cloud Code를 다른 서비스에 아주 쉽게, 네이티브하게 연결할 수 있습니다. 자, 많은 분들이 저에게 묻습니다. “Cal, Cloud Code로 뭘 할 수 있나요?

35
00:06:33,000 --> 00:06:47,000
the reality is it's kind of great at everything. So let's start with discovery. Often times in your career, you will be dropped into a new codebase. Whether that means you're switching teams,
어디에 쓰면 좋죠? 뭐가 흥미로운가요?” 현실은, 거의 뭐든 잘합니다. 우선 ‘발견(Discovery)’부터 봅시다. 커리어 동안 여러분은 새로운 코드베이스에

36
00:06:47,000 --> 00:06:54,000
you're switching companies, I don't know, you're starting to work on some sort of open source project. And probably when you're first getting started and getting familiar,
투입되는 일이 자주 있습니다. 팀을 바꾸거나, 회사를 바꾸거나, 오픈소스 프로젝트에 참여한다든가요. 처음 익숙해지는 동안에는

37
00:06:54,000 --> 00:07:03,000
you're not very productive because you're just trying to figure out where things are in the codebase, what patterns kind of the team is using, things like that. And Claude code can kind of help
그리 생산적이지 않죠. 코드베이스에서 무엇이 어디에 있는지, 팀이 어떤 패턴을 쓰는지 등을 파악하느라 시간을 보냅니다. Claude Code는 이런 온보딩 과정을

38
00:07:03,000 --> 00:07:13,000
supercharge that onboarding process. You can ask claude, hey, where is this feature implemented? Or since it's great at the terminal, you can say, hey, look at this file and look at the git
슈퍼차지할 수 있습니다. “이 기능은 어디에 구현되어 있어?”라고 Claude에게 물을 수 있고, 터미널에도 능하니 “이 파일 좀 보고, git 히스토리를 훑어서

39
00:07:13,000 --> 00:07:25,000
history and just kind of tell me a story about how this code has changed over the past couple weeks. One thing you can use cloud code for, and I think this is underrated, is instead of just diving in
지난 몇 주 동안 이 코드가 어떻게 바뀌었는지 이야기해줘.”라고 말할 수도 있죠. 또 제가 과소평가되었다고 생각하는 사용법 하나는, 바로

40
00:07:25,000 --> 00:07:34,000
and starting to work, you can use cloud code as a thought partner. So oftent times when I'm working with Claude and I want to implement a feature or we're going to change something up, I'll open up
바로 작업에 뛰어들기 전에 ‘생각 파트너’로 쓰는 겁니다. 저는 Claude와 함께 일하면서 기능을 구현하려거나 뭔가를 바꾸려 할 때, Claude를 열고

41
00:07:34,000 --> 00:07:43,000
Claude and I'll say, "Hey Claude, you know, I'm thinking about implementing this feature, can you just kind of like search around and kind of figure out how we would do it and maybe report
“헤이 Claude, 이 기능을 구현하려고 하는데, 일단 여기저기 검색해서 어떻게 하면 좋을지 알아보고, 두세 가지 옵션으로

42
00:07:43,000 --> 00:07:52,000
back with like two or three different options. Don't start working. don't start writing any files writing any files yet and claude will go off and use those agentic search capabilities
보고해줘. 아직 작업 시작하지 마. 파일도 쓰지 마.”라고 말합니다. 그러면 Claude는 에이전틱 검색 능력을 사용해

43
00:07:52,000 --> 00:08:04,000
and come back with a few ideas and then I could work with claude to kind of validate things and then we can jump into the project of course cloud code is great at building and writing code and
몇 가지 아이디어를 가져옵니다. 그러면 저는 Claude와 함께 그 아이디어를 검증하고 프로젝트에 본격적으로 들어가죠. 물론 Cloud Code는 코드를 빌드하고 작성하는 데에도 훌륭합니다.

44
00:08:04,000 --> 00:08:14,000
I would say this in on two different fronts one it can do the zero to one sort of stuff you drop it in an empty directory and you say hey build me an app build me a game that demos where very well
두 가지 관점에서 그렇습니다. 하나는 ‘제로 투 원(0→1)’입니다. 빈 디렉터리에 던져 놓고 “앱 만들어줘, 게임 만들어줘”라고 하면, 데모에서 정말 잘 작동하고

45
00:08:14,000 --> 00:08:27,000
it's very fun to do it's very grat gratifying. Of course, in reality, what really matters is is cloud code good working in existing code bases. And this is primarily what we focus on. Um,
정말 재밌고, 매우 만족스럽습니다. 물론 현실에서 진짜 중요한 건, Cloud Code가 기존 코드베이스에서 얼마나 잘 작동하느냐죠. 그리고 우리는 주로 여기에 집중합니다. 음,

46
00:08:27,000 --> 00:08:41,000
on the cloud code team, we have in our codebase abnormally high, I would say, unit test coverage. And that's because cloud code makes it so easy and just straightforward to add unit tests. So, we
Cloud Code 팀의 우리 코드베이스에서는 비정상적으로 높은 수준의 단위 테스트 커버리지를 갖고 있습니다. 왜냐하면 Cloud Code를 사용하면 단위 테스트를 추가하는 게 매우 쉽고 간단하기 때문이죠. 그래서

47
00:08:41,000 --> 00:08:50,000
have great code coverage. And then the other thing we have in cloud code in our own codebase is we have great commits and PR messages because when we finish working we'll just say hey cloud write the
코드 커버리지가 훌륭합니다. 또 우리 Cloud Code 자체 코드베이스에서는 커밋과 PR 메시지도 아주 좋습니다. 작업을 마치면 “헤이 Claude, 커밋 메시지 써줘, PR 메시지 써줘.”

48
00:08:50,000 --> 00:09:04,000
commit for me write the PR message for me. We also see great opportunities to use cloud code in kind of the deployment like deployments and in other parts of the life cycle. And this is a few other
라고 말하거든요. 배포와 그 외 라이프사이클에서도 Cloud Code를 훌륭히 사용할 기회가 많습니다. 몇 분이 이미 이야기했듯,

49
00:09:04,000 --> 00:09:17,000
people have talked about this but this is using the cloud code SDK. So using it headlessly, using it programmatically, being able to sprinkle in a coding agent agent anywhere. And so that's things
Cloud Code SDK를 사용하는 겁니다. 즉 헤드리스로, 프로그래밍 방식으로 사용해서 어디서든 코딩 에이전트를 뿌려 넣는 것이죠. 예를 들어

50
00:09:17,000 --> 00:09:30,000
like sprinkling it into CI/CD to use it in GitHub for instance to help people um programmatically. And then finally, it's great kind of with support and scale. It can help you debug errors faster.
CI/CD에 넣거나, GitHub에서 사람들을 프로그래밍 방식으로 돕게 하는 방식입니다. 그리고 마지막으로, 지원 및 스케일에서도 뛰어납니다. 오류 디버깅을 더 빠르게 도와주죠.

51
00:09:30,000 --> 00:09:40,000
One thing that we saw when we started giving cloud code to customers and talking to them about it, we didn't totally predict this was a lot of customers or potential customers said, "Hey,
고객들에게 Cloud Code를 제공하고 대화를 나누기 시작했을 때, 우리가 전혀 예상하지 못했던 한 가지가 있었습니다. 많은 고객, 혹은 잠재 고객이 “우리는

52
00:09:40,000 --> 00:09:50,000
we've been me we've been kind of putting off this like large codebase migration. People that are on old versions of Java trying to get to a new one or a team that's on PHP and they're trying to
오래 미뤄온 대규모 코드베이스 마이그레이션이 있어요.”라고 말한 겁니다. 오래된 Java 버전에서 새 버전으로 가려는 팀, PHP에서 React나 Angular로

53
00:09:50,000 --> 00:10:00,000
get to React or Angular. We've talked to multiple teams like this and having a tool like Cloud Code makes projects like that a little more digestible. when you go to your team and you say, "Hey, we're
가려는 팀 같은 경우요. 우리는 이런 팀을 여러 번 만났고, Cloud Code 같은 도구가 있으면 그런 프로젝트가 훨씬 소화하기 쉬워진다고 했습니다. 팀에 가서 “자, 한 달 동안

54
00:10:00,000 --> 00:10:12,000
going to spend a month, you know, refactoring or rewriting large parts of the codebase." And then on top of that, and this kind of matters across all these, is once again remember Claude is great
리팩터링이나 코드베이스의 큰 부분을 다시 쓸 겁니다.”라고 말하는 일이 가능해지는 거죠. 그리고 이 모든 것 전반에 중요한 점이 하나 더 있습니다. 다시 말하지만, Claude는 터미널을 정말 잘한다는 겁니다.

55
00:10:12,000 --> 00:10:22,000
at the terminal. And that means it's going to be great at all those different CLI tools, things like Git, Docker, Big Query, things like that. I never have to worry about, oh, I'm going
이 말은 Git, Docker, BigQuery 같은 각종 CLI 도구들에 전부 강하다는 뜻입니다. 저는 더 이상 “아, 끔찍한 리베이스에 빠졌는데 어떻게 빠져나오더라?”

56
00:10:22,000 --> 00:10:34,000
to get myself, how do I get myself out of this sticky rebase? I'll just fire up cloud code and tell it the situation and be like, "Hey, can you fix this for me?" It's incredible. Now, let's
라고 고민하지 않습니다. 그냥 Cloud Code를 켜고 상황을 설명한 뒤, “이거 좀 고쳐줄래?”라고 하면 됩니다. 정말 놀랍습니다. 이제

57
00:10:34,000 --> 00:10:48,000
talk about best practices. And the first one is not going to be a surprise, but the first one is use claw.md files. So, remember that cloud code, like I said, is an agent and it has some tools,
모범 사례로 넘어가 보죠. 첫 번째는 놀랍지 않게도, claw.md(claude.md) 파일을 쓰라는 겁니다. 앞서 말했듯 Cloud Code는 에이전트이고, 몇 가지 도구,

58
00:10:48,000 --> 00:11:00,000
has some lightweight instructions in the prompt, but it doesn't really have memory. And so the main way we share state across kind of sessions or across our team when we fire up cla code
프롬프트에 가벼운 지시사항이 있지만 ‘진짜 메모리’는 없습니다. 그래서 동일한 코드베이스에서 세션 간 또는 팀원 간 상태를 공유하는 주요 방법이

59
00:11:00,000 --> 00:11:12,000
in the same codebase over and over again is this cloud.mmd file. So when we start cla what happens is if there's this claw.md file in the working directory it's just plopped into context. It's
바로 이 claude.md 파일입니다. Claude를 시작할 때, 작업 디렉터리에 claude.md 파일이 있다면 그것이 그대로 컨텍스트에 들어갑니다.

60
00:11:12,000 --> 00:11:22,000
plopped into the prompt. And basically what it says is hey claude by the way these are important instructions the developer left for you. Be sure to pay close attention to this. And there's
프롬프트에 그대로 삽입되죠. 기본적으로는 “헤이 Claude, 개발자가 남긴 중요한 지시사항이야. 꼭 주의 깊게 따라.”라는 의미입니다. 이 파일을 두는 위치는

61
00:11:22,000 --> 00:11:31,000
various places you can put the cloudmd file. You can put it in a project and check it in so all your teammates share it. You could put one in your home directory if there's things you just want
여러 가지가 있습니다. 프로젝트에 넣고 버전 관리해 팀원들이 공유하게 할 수도 있고, 집(home) 디렉터리에 넣어

62
00:11:31,000 --> 00:11:41,000
claude to always know about regardless of what you're working on. And the things you put in here are things like, hey, by the way, maybe this is how you run the unit tests. Or just so you know,
무엇을 작업하든 Claude가 항상 알았으면 하는 것들을 적어둘 수도 있습니다. 여기에 넣을 내용은 예컨대 “유닛 테스트는 이렇게 실행해.” 같은 것들, 혹은

63
00:11:41,000 --> 00:11:51,000
to make kind of your searching and life easier, here's like just like an overview of kind of how this project is laid out, where the tests live, what different modules are, things like that.
검색과 작업을 쉽게 하기 위해 “이 프로젝트가 어떻게 구성되어 있는지, 테스트가 어디에 있고, 모듈은 어떻게 나뉘는지” 같은 개요를 적을 수도 있습니다.

64
00:11:51,000 --> 00:12:03,000
or here's our style guide. All sorts of things like that to just make Claude's life a bit easier. And you can build these things up over time. The other thing you can do, which is important,
또는 스타일 가이드 같은 것도 좋죠. 이런 것들을 시간에 따라 구축해 나갈 수 있습니다. 또 중요한 것이 권한 관리입니다.

65
00:12:03,000 --> 00:12:13,000
is permission management. When you're running Cloud Code, there's all sorts of different kind of permission things flying by. Kind of out of the box, what happens when you start our tool is for
Cloud Code를 실행하면 온갖 권한 관련 메시지들이 오갑니다. 기본적으로는, Claude가 읽거나 검색하는 read 작업은

66
00:12:13,000 --> 00:12:26,000
read actions. If Claude is searching or reading, we just let it go. But once it starts writing or running bash commands or doing things that could change change stuff on your machine potentially,
그냥 흘려보냅니다. 하지만 파일을 쓰거나 bash 명령을 실행하는 등, 여러분의 머신을 바꿀 수 있는 일을 시작하면,

67
00:12:26,000 --> 00:12:38,000
that's when we kick in this UI and it says something like yes, yes, always allow this or no, um, I want to do something else. And using that permission management and being smart about it
그때는 UI가 개입해서 “예, 항상 허용 / 아니오, 다른 걸 하겠다” 같은 선택지를 제시합니다. 이 권한 관리를 똑똑하게 쓰면

68
00:12:38,000 --> 00:12:48,000
can help you work faster. So there's something called autoaccept mode where if you're working with cloud code and you press shift tab, claude will just start working. There's things you can
더 빠르게 일할 수 있습니다. 예를 들어 autoaccept 모드가 있는데, Cloud Code에서 Shift+Enter(발표에서는 Shift+Tab이라 언급) 를 누르면 Claude가 바로 작업을 시작합니다. 또 설정에서

69
00:12:48,000 --> 00:13:01,000
do like you can configure claude in the settings where specific commands like on bash like if you just are like tired of saying yes run npm run test you can just always approve that. So fiddling with
특정 bash 명령을 자동 승인하게 할 수 있습니다. 예컨대 “npm run test를 실행해도 될까요?”라는 질문에 매번 ‘예’를 누르는 게 지겨우면 항상 승인하도록요. 이런

70
00:13:01,000 --> 00:13:12,000
your permission management is a great way to kind of speed up your workflow integration setup. So, one thing that is going to help you get the most out of cloud code is remember that it's great at
권한 관리를 만져보는 건 워크플로 속도를 높이는 좋은 방법입니다. 통합 설정(Integration setup). Cloud Code를 최대한 활용하려면, 다시 강조하지만 Claude는 터미널에 강합니다.

71
00:13:12,000 --> 00:13:23,000
the terminal. And if there's applications that you use which have kind of a way to access them through CLI and GitHub is a great example of that. They have a powerful tool called GH you
CLI로 접근할 수 있는 애플리케이션이 있다면—GitHub가 좋은 예죠—강력한 GH라는 도구가 있습니다. 이런 CLI 도구를 설치하면 Cloud Code에 더 많은 일을

72
00:13:23,000 --> 00:13:37,000
can basically give more work to cloud code and you can do that either by just installing more CLI tools or you can attach more MCP servers. Um, I would say just through experience that if you're
맡길 수 있습니다. 또는 MCP 서버를 더 붙여도 되고요. 경험상,

73
00:13:37,000 --> 00:13:48,000
using something like um, a CLI tool that's well known and well documented and you're trying to choose between the CLI tool and just installing it on your machine and grabbing an MCP server,
문서화가 잘 된 유명한 CLI 도구와 MCP 서버 중에서 선택해야 한다면,

74
00:13:48,000 --> 00:14:01,000
I would recommend using the CLI tool. Um, and then also if you internally have your own tools at Anthropic, we have something called coup that does a whole bunch of stuff for us. You can also
저는 CLI 도구 사용을 권합니다. 또 내부에 자체 도구가 있다면—Anthropic에는 우리에게 여러 일을 해주는 ‘coup’라는 것이 있어요—그걸 Claude에게 알려줄 수도 있습니다. 그런 내용은

75
00:14:01,000 --> 00:14:13,000
tell Claude about that and you pro that's the sort of thing you'd put in claude.mmd and then context management. So remember that claude is an agent and when it's an a what what it does it's calls
claude.md에 적어두면 좋겠죠. 그 다음은 컨텍스트 관리입니다. Claude는 에이전트이고, 에이전트는

76
00:14:13,000 --> 00:14:24,000
these tools and the context builds up and up over time and at least for anthropic our models have a context window of 200,000 tokens and you can max this thing out. So you kind of have two options
도구를 호출하고 호출하면서 컨텍스트가 점점 쌓입니다. 최소한 Anthropic의 모델은 200,000 토큰의 컨텍스트 윈도우를 가지고 있고, 이걸 꽉 채울 수 있어요. 그래서 긴 세션에서

77
00:14:24,000 --> 00:14:33,000
when you're in a long session with claude and you're working and you're going back and forth. You'll see in the bottom right you'll start to get this little warning that'll say hey you're
오래 작업하다 보면, 오른쪽 아래에 “컨텍스트 윈도우가 차고 있다”는 경고가 뜹니다. 상황에 따라 두 가지 선택지가 있죠. /clear를 실행해

78
00:14:33,000 --> 00:14:43,000
starting to fill up the context window and kind of depending on what's going on you have two options. You can run slashcle and just start over and that clears everything out except for for instance
처음부터 다시 시작하거나, /compact를 실행하는 겁니다. /compact를 실행하면, 사용자 메시지가 삽입되며 “지금까지 우리가 한 일을

79
00:14:43,000 --> 00:14:55,000
claw.mmd or you can run slash compact and what'll happen is basically it's like a user message is inserted and it just says something like hey I need to go summarize everything we've been
요약해서 다른 개발자에게 넘길 거야. 그가 이어서 작업할 거야.” 같은 내용이 들어갑니다. 그리고 그 요약이

80
00:14:55,000 --> 00:15:04,000
up to. I'm going to give this to another developer and they're going to pick up where I left off. And then that summary is what kind of seeds the next session. You can go from there. We spend a lot of
다음 세션의 씨앗이 됩니다. 우리는 이 compact 기능을 많이 다듬었기 때문에, 컨텍스트 창을 꽉 채운 뒤 compact를 실행하고

81
00:15:04,000 --> 00:15:16,000
time tuning this kind of compact functionality so that as you max out the context window and then run compact, you can start back over and keep going efficient workflows. What can you do
다시 시작해도 계속 이어갈 수 있습니다. 효율적인 워크플로. Cloud Code로 무엇을 할 수 있고,

82
00:15:16,000 --> 00:15:26,000
with cloud code? And how do you get the most out? So using planning and to-dos. talked a little bit about this before, but one of the best things you can do is when you open up Cloud Code, instead of
어떻게 최대한 활용할까요? 계획과 할 일(To-dos) 활용입니다. 앞서 잠깐 말했지만, Cloud Code를 켜자마자 “이 버그 고쳐줘”라고 말하기보다는

83
00:15:26,000 --> 00:15:36,000
saying, "Hey, I need you to fix this bug," you can say, "Hey, I have this bug. Can you search around, figure out what's causing it, and just like tell me a plan how we're going to fix it?" And this can
“이런 버그가 있는데, 어디서부터 비롯됐는지 검색해서 찾아내고, 어떻게 고칠지 계획을 알려줘.”라고 말하는 게 좋습니다. 그러면

84
00:15:36,000 --> 00:15:46,000
save you a lot of time because you can verify, you can read Claude's plan, and you can verify what it's going to do. And then the other thing that we have is we have this to-do list feature.
여러분이 Claude의 계획을 검증하고 나서 시작할 수 있어 많은 시간을 절약할 수 있습니다. 또한 우리는 To-do 리스트 기능이 있습니다.

85
00:15:46,000 --> 00:15:57,000
So often when Claude's working on a big task, it'll create a to-do list. And if you're kind of paying attention, you can kind of watch this to-do list, and if you see anything kind of weirder in
Claude가 큰 작업을 할 때는 종종 To-do 리스트를 만듭니다. 여러분이 그 리스트를 잘 보고 있다가,

86
00:15:57,000 --> 00:16:06,000
there or something that doesn't make sense, that's when you can press escape and say, "Hey Claude, let's change the to-do list. I think you're on the wrong path." Smart vibe coding. So it's
이상한 항목이나 말이 안 되는 항목이 보이면, 그때 Esc를 눌러 “헤이 Claude, To-do 리스트를 바꾸자. 지금 경로가 좀 잘못된 것 같아.”라고 개입하면 됩니다.

87
00:16:06,000 --> 00:16:16,000
very tempting and it's very powerful to just let Claude work and press enter and see what happens at the end. I think there's a few things that can help make this better. And there's I think a talk
‘스마트 바이브 코딩’. Claude에게 일을 맡기고 엔터를 눌러, 마지막에 무슨 일이 벌어지는지 보는 건 유혹적이고 강력합니다. 하지만 더 좋게 만드는 몇 가지가 있습니다. 30분짜리

88
00:16:16,000 --> 00:16:28,000
later today about just this for 30 minutes. But doing things like having test-driven development, having Claude make small changes, run the tests, make sure they pass, always having Claude do
세션에서 이 주제만 다룰 발표가 따로 있다고도 하던데요. 테스트 주도 개발을 하고, Claude로 하여금 작은 변경을 하게 하고, 테스트를 실행하고, 통과하는지 확인하고, 항상 TypeScript 체크와 린트,

89
00:16:28,000 --> 00:16:39,000
things like check the TypeScript and the linting, and then commit regularly so that if it's kind of going off the rails, you can always fall back and try again. You can use screenshots to guide and
그리고 정기적으로 커밋하게 하세요. 그러면 만약 경로가 틀어져도 언제든 롤백해 다시 시도할 수 있습니다. 스크린샷으로 안내하고 디버그하기. Claude는

90
00:16:39,000 --> 00:16:49,000
debug. So Claude is built on top of our models which are multimodal. You can always just grab a screenshot, paste it in, or if you have a file somewhere that's an image, you can just say, "Hey,
멀티모달 모델 위에 구축되었습니다. 언제든 스크린샷을 찍어 붙여 넣을 수 있고, 이미지 파일이 있다면 “헤이 Claude, 이 mock.png를 보고

91
00:16:49,000 --> 00:17:02,000
Claude, look at this mock.png and then build the website for me or whatever." And then advanced techniques. So, as you're getting used to using Claude, what are some things you can think about
웹사이트를 만들어줘.” 같은 요청도 할 수 있죠. 고급 기법. Claude를 꽤 써봤다면,

92
00:17:02,000 --> 00:17:12,000
uh to kind of push things to the next level? And one of the things we see both internally and with customers is when you've started to use this tool for a while, it's going to be very tempting to use
다음 단계로 밀어붙이는 몇 가지를 생각해볼 수 있습니다. 내부와 고객 모두에게서 우리가 본 것 중 하나는, 어느 정도 익숙해지면 한꺼번에 여러 Claude를

93
00:17:12,000 --> 00:17:24,000
multiple clouds at once. And so I know people at Anthropic and a few customers that run four clouds at the same time. There's various ways to do this. You can have it in T-Mox or just different tabs,
쓰고 싶다는 유혹이 생긴다는 겁니다. Anthropic 안에서도, 고객 중에서도 Claude를 4개 동시에 돌리는 사람들이 있어요. 방법은 여러 가지입니다. Tmux에

94
00:17:24,000 --> 00:17:35,000
all sorts of crazy things. So I would challenge you to try getting multiple clubs running at once and kind of be orchestrating all these things. It's quite fun. I can only do two, but I know
띄울 수도 있고, 탭을 나눌 수도 있고요. 별별 방식이 있습니다. 여러분도 여러 Claude를 동시에 돌려보며 오케스트레이션해 보길 권합니다. 꽤 재미있습니다. 저는 두 개까지만 하는데,

95
00:17:35,000 --> 00:17:47,000
people that do four. Use escape. So, escape is your best friend. While Claude is working, you can kind of keep an eye on what it's up to, and you can press escape to stop it and interject
네 개를 하는 사람들도 알아요. Esc를 쓰세요. Esc는 최고의 친구입니다. Claude가 작업하는 동안, 무슨 일을 하고 있는지 눈여겨보세요. 그리고 Esc를 눌러 중단하고

96
00:17:47,000 --> 00:17:56,000
and say, "Hey, I think you're going on the wrong path, or I want you to do something else." Knowing when the right time to press escape is versus just letting Claude figure it out, is key to
“지금 경로가 좀 잘못됐어”라거나 “다른 걸 해 줬으면 해”라고 개입할 수 있습니다. 언제 Esc를 눌러야 하고, 언제 Claude가 스스로 알아서 하게 둬야 하는지 아는 것이

97
00:17:56,000 --> 00:18:06,000
getting the most out of the tool. And there's a hidden feature. Not too many people know about it, but if you press escape twice, you can actually jump back in your conversation. You can go back
이 도구를 최대한 활용하는 핵심입니다. 숨겨진 기능도 있어요. 많은 분이 모르는데, Esc를 두 번 누르면 대화에서 뒤로 점프할 수 있습니다. 즉,

98
00:18:06,000 --> 00:18:19,000
and you can kind of reset tool expansion in MCP. So, this is taking it to the next level. If you feel like with bash and with the tools that cloud has that it still can't do something, this is
대화로 돌아가 MCP에서의 도구 확장을 재설정할 수 있습니다. MCP에서의 도구 확장 재설정에 관해 말이죠. 그 다음은

99
00:18:19,000 --> 00:18:30,000
when you should start looking at MCP servers. And then headless automation. And I think this is the thing we're most excited about, but also we are still trying to wrap our heads around internally,
그때 MCP 서버를 보기 시작해야 합니다. 그리고 헤드리스 자동화. 우리가 가장 흥분하는 부분이지만, 내부적으로도 아직 머리를 싸매고 있는 부분입니다.

100
00:18:30,000 --> 00:18:43,000
which is how can we use Claude programmatically. We have that in GitHub actions. We want to figure out other creative places we can start using it. I would challenge you all to do the same.
넣는 방법을 찾고 싶습니다. 여러분도 같은 도전을 해 보시길 바랍니다.

101
00:18:43,000 --> 00:18:55,000
So, with that said, uh I'm going to jump over to my computer because there's one other best practice, which is it's always good to stay on top of everything that's new. So, we're shipping
그럼 이제 제 컴퓨터로 넘어가 보겠습니다. 또 하나의 모범 사례가 있는데, 항상 최신 소식을 따라가는 게 좋다는 겁니다. 우리는

102
00:18:55,000 --> 00:19:06,000
super fast. I'm going to throw I'm just going to go over a few things that are new as of today. Um, one thing is when you're in Cloud Now and you fire it up, you can do slashmodel. You can see what
엄청 빠르게 배포하고 있어요. 오늘 기준으로 새로 나온 것들 몇 가지를 훑어보겠습니다. 음, Cloud Now에서 실행하면 /model을 입력할 수 있고, 지금

103
00:19:06,000 --> 00:19:20,000
model you're running on. I'm on default, which happens to be Sonnet. We can jump over to Opus. You can do the same thing in slashconfig. Switch it here. So that's new. Make sure you're running
어떤 모델을 쓰고 있는지 볼 수 있습니다. 저는 기본값인 Sonnet을 쓰고 있어요. Opus로도 옮길 수 있습니다. /config에서도 같은 일을 할 수 있고요. 여기서 바꿀 수 있습니다. 이게 새로 추가됐습니다.

104
00:19:20,000 --> 00:19:32,000
the model that works for you. There's another thing that's new about these models which is you can say something like um can you figure out what's in this project? And for a long time for a
여러분에게 맞는 모델을 사용하고 있는지 확인하세요. 모델과 관련해 또 새로운 점은, 이런 식으로 말할 수 있다는 겁니다. 음, “이 프로젝트에 뭐가 있는지 알아낼 수 있어?”

105
00:19:32,000 --> 00:19:44,000
while we've had this like think hard or extended thinking. Now this is great but with our past models the we wouldn't let our model think between tool calls and that's probably when the thinking
우리는 한동안 ‘think hard’ 또는 확장 사고(extended thinking)를 지원해 왔습니다. 이건 훌륭했지만, 이전 모델에서는

106
00:19:44,000 --> 00:19:53,000
matters most. So starting with cloud 4 they can now our models now think between tool calls and we can watch this happen. So we have Claude in this project. There's a few different files in
모델이 생각할 수 있게 되었습니다. 그리고 그걸 눈으로 볼 수 있습니다. 지금 이 프로젝트 안에 Claude가 있고,

107
00:19:53,000 --> 00:20:03,000
here and I'm just going to tell it to think hard and figure out what's in this project and we can watch Claude start to work. And so the way you know you triggered thinking is you'll see kind
여기에 몇 개의 파일이 있습니다. 그냥 “think hard 해서 이 프로젝트에 뭐가 있는지 알아내줘”라고 시켜 보죠. 그리고 Claude가 어떻게 작업하는지 볼 수 있습니다. ‘생각 중’이

108
00:20:03,000 --> 00:20:14,000
of this lighter gray text and then it'll call some file, it'll call some tools, it'll read some stuff, and then we see some more thinking. And this is awesome. Um, so I encourage you when
트리거되면 연한 회색 텍스트가 보일 거고, 파일을 읽는 등의 도구 호출이 이어지고, 그다음에 또 생각하는 과정이 보일 겁니다.

109
00:20:14,000 --> 00:20:27,000
you're working on tasks and solving bugs, throw a think hard in there. And then the other thing, and you know what, we'll just throw it up real quick, is I have this in VS Code, but of course
아주 멋져요. 버그를 고치거나 작업할 때, ‘think hard’를 같이 던져 보시길 권합니다. 그리고 한 가지 더—저는 지금 VS Code에서 보여드리지만,

110
00:20:27,000 --> 00:20:41,000
this is in Jet Brains as well, but we have these new great integrations with VS Code and and Jet Brains. Um, we can do things like Claude's going to know what file I'm in. What file am I in?
JetBrains에서도 마찬가지로 훌륭한 통합이 있습니다. 예컨대 Claude가 제가 열어둔 파일이 뭔지 알 수 있어요. “내가 어떤 파일을 열어놨어?”

111
00:20:41,000 --> 00:20:58,000
That is not what I meant to say, but Claude's going to figure it out. And you can do things like this.
제가 원래 하려던 말은 그게 아니었지만, Claude가 알아낼 겁니다. 이런 것들을 할 수 있죠.

112
00:20:58,000 --> 00:21:08,000
So these are the sort of things I would encourage you to stay on top of. We have a public uh kind of GitHub project called Claude Code under Enthropic. You can post issues there,
이런 것들을 항상 따라가시길 권합니다. Enthropic의 공개 GitHub 프로젝트—Anthropic의 Claude Code—가 있고,

113
00:21:08,000 --> 00:21:19,000
but we also post our change log there. And so I check this once a week and make sure that I'm on top of all the new stuff we're shipping because even I can't keep up with it. So, with that said,
거기에 이슈를 올릴 수도 있지만, 변경 로그도 올려둡니다. 저는 주 1회는 꼭 확인해서 우리가 배포하는 새 기능들을 따라가려고 합니다. 저도 다 따라가기 벅차거든요. 자, 그럼

114
00:21:19,000 --> 00:21:33,000
we have like four minutes left. I'm happy to answer questions about anything cloud code related. We have it here. I can live demo some stuff if you're interested. Um, let's do a few.
이제 4분 정도 남았네요. Cloud Code에 관해 무엇이든 질문해 주세요. 여기 준비되어 있습니다. 원하시면 라이브 데모도 할 수 있어요. 음, 몇 가지 질문을 받아보죠.

115
00:21:33,000 --> 00:21:46,000
Thanks. Real quick, this might be obvious, but multiple cloud MD files in a project. I presume that's possible and it just figures it out or no? So, there's a few options, of course, like in the
감사합니다. 아주 기본적인 질문일 수도 있는데요. 프로젝트 안에 여러 개의 Claude MD 파일을 둘 수 있나요? 가능하다면 Claude가 알아서 판단하나요, 아니면 안 되나요? 음, 몇 가지 옵션이 있어요. 같은

116
00:21:46,000 --> 00:22:02,000
same directory. You couldn't um but you could have one here and one in a subdirectory. And I think we changed this so that all the subdirectory ones aren't read in because like Anthropic, we have a
디렉터리 안에서는 안 됩니다. 음, 하지만 여기 하나, 그리고 하위 디렉터리에 하나를 둘 수는 있죠. 그리고 우리는 이걸 바꿨습니다. 모든 하위 디렉터리의 파일들을 다 읽지 않도록요. Anthropic에서는

117
00:22:02,000 --> 00:22:15,000
monor repo and people would open it at the top and blow up their context with all the claud MDs. So, we encourage Claude when it's searching around and it discovers claw.md files in um child directories
모노레포를 쓰다 보니, 최상단에서 열면 수많은 claude.md가 컨텍스트를 터뜨려 버리거든요. 그래서 Claude가 여기저기 검색하다가 하위 디렉터리의 claude.md 파일을

118
00:22:15,000 --> 00:22:25,000
that are relevant to be sure to read them. But by default, it just reads the cloud MD file in the current working directory when you fire it up. And then also you can set one in like your home
발견하고 관련 있다고 판단되면 읽도록 권장합니다. 하지만 기본적으로는, 툴을 시작할 때 현재 작업 디렉터리에 있는

119
00:22:25,000 --> 00:22:39,000
directory. Um there are things you can do though. We have this new thing like in your cloud MD you can start referencing other files. So you could for instance um do something like this with an
claude.md만 읽습니다. 그리고 홈 디렉터리에 하나 둘 수도 있어요. 음, 또 할 수 있는 일들이 있는데, 새로 추가된 기능으로 claude.md 안에서 다른 파일을 참조할 수 있게 했습니다.

120
00:22:39,000 --> 00:22:54,000
at sign um if you have other cloud MD files that you just kind of know you always want to read in um to do something like that. Hi. Okay. I um have not had luck getting Claude to respect my Claude
그런 식으로 참조할 수 있습니다. 안녕하세요. 저는 Claude가 제 Claude MD를 잘 지키지 못하는 문제가 있었어요. 특히 한 가지가—

121
00:22:54,000 --> 00:23:04,000
MD. Like there's one thing particular. Yes. where I'll ask it to refactor something and then it will leave inline comments explaining the like the what of it is and it's like like something that's
네. 제가 리팩터링을 요청하면, ‘무엇을 했는지’(what)를 설명하는 인라인 주석을 남겨요. 너무나 자명한 걸요. 그래서 “그런 인라인 주석은 모두 제거해 달라”고 지시하면 그걸 지우지만,

122
00:23:04,000 --> 00:23:22,000
extremely obvious and so I'll tell it like go and remove any inline comments that describe the what of what's happening and then it will remove it and then immediately do it again and like the same
같은 패스에서 곧바로 다시 그걸 합니다. 이런 경우에 대처 전략이 있을까요? 음, 그걸 해결한 방법이 두 가지가 있었습니다. 사실 그건 프롬프트 문제가 아니라 ‘모델 문제’였어요. 프롬프트에는

123
00:23:22,000 --> 00:23:32,000
actually a lot in the prompt for 37 that said, "Whoa, do not leave comments." And despite that, the model just loves to leave comments. Um, so it doesn't surprise me that your cloud MD didn't help
“인라인 주석 남기지 마”라는 내용이 꽤 많았습니다. 그럼에도 모델이 주석을 너무 좋아했죠. 그래서 Claude MD가 큰 도움이 되지 않았다는 게 놀랍지는 않네요. 기본 설정 차원에서도

124
00:23:32,000 --> 00:23:45,000
much either. We already did a lot I did a lot of work to try to tamp it down from what happens out of the box. So we mostly fixed that in Cloud 4. Now there might be some new weird behavior quirks,
그걸 억누르려고 많이 노력했습니다. Claude 4에서 대부분 고쳤습니다. 물론 새로운 이상한 행동의 기벽들이 있을 수도 있지만,

125
00:23:45,000 --> 00:23:54,000
but the other thing we made better in Cloud 4 is it's just better at following instructions. Um, and we've gotten a lot of feedback from early testers that, uh, all of a sudden, whoa,
Claude 4에서는 지시를 따르는 성향이 전반적으로 더 좋아졌습니다. 초기 테스터들로부터 “이제 Claude MD의 지시를 훨씬 잘 따른다”는 피드백을 많이 받았어요.

126
00:23:54,000 --> 00:24:05,000
my cloud MD is being followed way more closely. Um, and it might be a good chance to go look in your CloudMD and decide, do I still need this stuff? Maybe I can take some of it out. Maybe
그래서 지금이 Claude MD를 다시 들여다보고, 정말 필요한 것과 불필요한 것을 정리할 좋은 타이밍일 수 있습니다. 아마

127
00:24:05,000 --> 00:24:15,000
I need to add a few new things. So, moving over to the new models might be a good time to take another look at what's in there and see what you need and what maybe can go. Uh,
몇 가지는 빼도 될 수도 있고, 몇 가지는 새로 추가해야 할 수도 있어요. 그러니 새 모델로 옮기면서 내용을 다시 한번 점검해 보세요. 음,

128
00:24:15,000 --> 00:24:24,000
for the record, I'm trying to think of something that you might not have thought of. We're doing multi- aent execution and parallelization. Can you make it so that for four agents,
혹시 생각 못 하셨을까 봐 여쭙는데요. 멀티 에이전트 실행과 병렬화에 대해서요. 예를 들어 에이전트가 4개일 때, 에이전트 2와 3은 에이전트 1의 컨텍스트를 사용하고,

129
00:24:24,000 --> 00:24:37,000
say agents two and three use the context from agent one, maybe agent four uses the context from agent two at a certain point. Yeah. Um yeah, etc. That's interesting. We're trying to So,
에이전트 4는 어느 시점에 에이전트 2의 컨텍스트를 쓰게 하는… 네, 음 네, 흥미롭네요. 저희가 하려는 건 앞부분에서 말했듯 ‘단순하지만 작동하는 것’입니다. 즉,

130
00:24:37,000 --> 00:24:45,000
kind of like I said at the beginning, we're trying to do the simple thing that works, which is just one agent that's great at coding and does everything. Um I think we want to figure
모든 걸 잘하는 하나의 에이전트죠. 아마 언젠가 그걸 잘 풀어낼 겁니다. 지금 그걸 하려면 아마 모든 에이전트가

131
00:24:45,000 --> 00:24:55,000
that out. Probably what's going to happen is if you wanted to do that, you would ask all your agents to probably like write to a shared markdown file or something like that so they can all kind
공유 마크다운 파일 같은 곳에 글을 써서 서로

132
00:24:55,000 --> 00:25:06,000
of like check in and communicate. Um, sometimes like I'll be working with cloud.md or claude and I'll just say like, "Hey, I need you to write some stuff in like ticket.md for another developer and
체크인하고 커뮤니케이션하게 만드는 게 좋을 겁니다. 가끔 저는 Claude/claude.md와 작업할 때 “다른 개발자를 위해 ticket.md에 메모 좀 남겨줘.”라고 하고,

133
00:25:06,000 --> 00:25:15,000
then I'll fire up another cloud code and I'll be like, hey, read ticket.md like another developer left this note for you. Like this is what you're going to work on." So, I would think about trying
그다음 다른 Claude Code를 켜서 “ticket.md 읽어봐. 다른 개발자가 남긴 메모야. 그걸 바탕으로 작업해.”라고 하곤 합니다. 그러니 지금으로서는

134
00:25:15,000 --> 00:25:26,000
to write that state to a file and then just kind of like count on the model's ability to just like read files and make sense them um is probably the best you can do today. And maybe we'll figure out
그 상태를 파일에 쓰고, 모델이 파일을 읽고 문맥을 파악하는 능력을 믿는 게

135
00:25:26,000 --> 00:25:42,000
clever ways to expose that uh in the product as something more native. Cool. All right. And with that said, I have some rare clawed code stickers that I found in my backpack. So, come find me.
찾을 수도 있겠죠. 멋집니다. 자, 이제

136
00:25:42,000 --> 00:25:45,000
I'll be hanging out over there or something. Um, happy to share them. Thank you. [Applause]
가방에서 우연히 찾은 희귀한 Claude Code 스티커가 좀 있어요. 저를 찾아오세요. 저쪽에 있을 겁니다. 음, 나눠드릴게요. 감사합니다. [박수]
